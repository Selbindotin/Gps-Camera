<!doctype html>
<html lang="en">
<head>
<meta charset="utf-8" />
<meta name="viewport" content="width=device-width,initial-scale=1" />
<title>Photo with GPS + Time Watermark</title>
<style>
  body{
    font-family:system-ui,Segoe UI,Roboto,Arial;
    margin:16px;
    display:flex;
    flex-direction:column;
    gap:16px;
    align-items:center;
    background:#f4f6f8;
    color:#333;
  }
  h1{font-size:1.3rem;margin:0;}
  video,canvas{max-width:100%;border-radius:12px;box-shadow:0 4px 12px rgba(0,0,0,0.2);background:#000}
  .controls,.editor{display:flex;gap:8px;flex-wrap:wrap;justify-content:center}
  button,select,input[type=range]{
    padding:6px 10px;border-radius:6px;border:1px solid #ccc;font-size:0.9rem;
  }
  button{background:#fff;cursor:pointer;transition:all 0.2s}
  button:hover{background:#007bff;color:#fff;border-color:#007bff}
  #msg{color:#555;font-size:0.95rem;text-align:center}
  .editor{flex-direction:column;align-items:stretch;background:#fff;
          padding:12px 16px;border-radius:12px;box-shadow:0 3px 10px rgba(0,0,0,0.1);width:100%;max-width:360px}
  .editor label{display:flex;gap:6px;align-items:center;justify-content:space-between;margin:4px 0}
</style>
</head>
<body>
  <h1>Camera Capture with GPS Watermark</h1>
  <div id="msg">Start camera and allow location.</div>

  <video id="video" autoplay playsinline muted></video>
  <canvas id="canvas" style="display:none"></canvas>

  <div class="controls">
    <select id="cameraSelect"></select>
    <button id="startBtn">Start</button>
    <button id="captureBtn">Capture</button>
    <a id="downloadBtn"><button disabled>Download</button></a>
  </div>

  <div class="editor">
    <strong>Watermark Settings</strong>
    <label>Font
      <select id="wmFont">
        <option value="sans-serif">Sans-serif</option>
        <option value="serif">Serif</option>
        <option value="monospace">Monospace</option>
        <option value="cursive">Cursive</option>
      </select>
    </label>
    <label>Font size <input type="range" id="wmSize" min="14" max="48" value="20"></label>
    <label>Opacity <input type="range" id="wmOpacity" min="0" max="1" step="0.05" value="0.85"></label>
    <label>Position
      <select id="wmPosition">
        <option value="bottom-left">Bottom Left</option>
        <option value="bottom-right">Bottom Right</option>
        <option value="top-left">Top Left</option>
        <option value="top-right">Top Right</option>
        <option value="center">Center</option>
      </select>
    </label>
  </div>

<script>
(async function(){
  const video=document.getElementById("video");
  const canvas=document.getElementById("canvas");
  const ctx=canvas.getContext("2d");
  const startBtn=document.getElementById("startBtn");
  const captureBtn=document.getElementById("captureBtn");
  const downloadBtn=document.getElementById("downloadBtn").firstElementChild;
  const cameraSelect=document.getElementById("cameraSelect");
  const msg=document.getElementById("msg");

  const wmFont=document.getElementById("wmFont");
  const wmSize=document.getElementById("wmSize");
  const wmOpacity=document.getElementById("wmOpacity");
  const wmPosition=document.getElementById("wmPosition");

  let stream=null;
  let latestUrl=null;

  // Populate camera list
  async function listCameras(){
    const devices=await navigator.mediaDevices.enumerateDevices();
    cameraSelect.innerHTML="";
    devices.filter(d=>d.kind==="videoinput").forEach((d,i)=>{
      const opt=document.createElement("option");
      opt.value=d.deviceId;
      opt.text=d.label||`Camera ${i+1}`;
      cameraSelect.appendChild(opt);
    });
  }

  async function startCamera(){
    if(stream) stream.getTracks().forEach(t=>t.stop());
    try{
      stream=await navigator.mediaDevices.getUserMedia({
        video:{deviceId:cameraSelect.value?{exact:cameraSelect.value}:undefined}
      });
      video.srcObject=stream;
      msg.textContent="Camera started.";
    }catch(e){msg.textContent="Camera error: "+e.message;}
  }

  async function getGeo(){
    return new Promise((res,rej)=>{
      if(!navigator.geolocation) return rej("Geo not supported");
      navigator.geolocation.getCurrentPosition(p=>{
        res({lat:p.coords.latitude,lon:p.coords.longitude});
      },rej,{enableHighAccuracy:true,timeout:8000});
    });
  }

  captureBtn.onclick=async()=>{
    if(!video.videoWidth){msg.textContent="Start camera first.";return;}
    let geo=null;
    try{geo=await getGeo();}catch(e){msg.textContent="Geo unavailable."; }
    const vw=video.videoWidth,vh=video.videoHeight;
    canvas.width=vw;canvas.height=vh;
    ctx.drawImage(video,0,0,vw,vh);

    const time=new Date().toLocaleString();
    const gps=geo?`Lat: ${geo.lat.toFixed(5)}  Lon: ${geo.lon.toFixed(5)}`:"Location unavailable";

    const lines=[time,gps];

    // style
    ctx.font=`${wmSize.value}px ${wmFont.value}`;
    ctx.textAlign="left";ctx.textBaseline="top";
    const lineHeight=parseInt(wmSize.value)*1.4;
    const padding=12;
    const boxWidth=Math.max(...lines.map(l=>ctx.measureText(l).width))+padding*2;
    const boxHeight=lines.length*lineHeight+padding*1.5;

    let x=padding,y=padding;
    ctx.textAlign="left";
    if(wmPosition.value.includes("bottom")) y=vh-boxHeight-padding;
    if(wmPosition.value.includes("right")){x=vw-boxWidth-padding;ctx.textAlign="left";}
    if(wmPosition.value==="center"){x=(vw-boxWidth)/2;y=(vh-boxHeight)/2;}

    // draw rounded rect background
    ctx.globalAlpha=wmOpacity.value;
    ctx.fillStyle="#000";
    ctx.beginPath();
    const r=12;
    ctx.roundRect(x,y,boxWidth,boxHeight,r);
    ctx.fill();
    ctx.globalAlpha=1;

    // text
    ctx.fillStyle="#fff";
    ctx.shadowColor="rgba(0,0,0,0.6)";ctx.shadowBlur=4;
    lines.forEach((line,i)=>{
      ctx.fillText(line,x+padding,y+padding+i*lineHeight);
    });

    canvas.toBlob(b=>{
      if(latestUrl) URL.revokeObjectURL(latestUrl);
      latestUrl=URL.createObjectURL(b);
      downloadBtn.parentElement.href=latestUrl;
      downloadBtn.parentElement.download=`photo_${Date.now()}.jpg`;
      downloadBtn.disabled=false;
      msg.textContent="Photo captured with watermark.";
    },"image/jpeg",0.9);
  };

  startBtn.onclick=startCamera;
  await listCameras();
})();
</script>
</body>
</html>
